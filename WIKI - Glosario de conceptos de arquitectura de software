WIKI - Glosario de conceptos de arquitectura de software

1. Modelo Vista Controlador (MVC - Model View Controller) 

Descripción: El patrón MVC divide una aplicación en las tres componentes principales: el Modelo, la Vista y el Controlador. El Modelo se ocupa de los datos y la lógica de la aplicación. La Vista se encarga de la interfaz de usuario. El Controlador responde de las interacciones entre la Vista y el Modelo. 

Características:
* Presenta una clara separación entre la lógica de la aplicación y la presentación.
* Las vistas están separadas de los datos subyacentes.

Ventajas:
* Fácil mantenimiento y escalabilidad.
* Permite tener múltiples vistas para el mismo modelo.

Desventajas:
* Puede añadir complejidad innecesaria a aplicaciones pequeñas.
* El código del Controlador puede ser complicado (al manejar muchas interacciones).

Ejemplo:
Frameworks web como Ruby on Rails, Django y ASP.NET MVC implementan este patrón.

Referencia:
Fowler, M. (2003). Patterns of Enterprise Application Architecture. Addison-Wesley.

2. Arquitectura en Capas (Layered Architecture)

Descripción: Con este patrón se organiza el sistema como distintas capas, donde cada capa tiene una clara responsabilidad y únicamente se puede comunicar con las capas adyacentes. Es muy habitual en aplicaciones empresariales donde se separa claramente la presentación de la lógica de negocio y del acceso a datos.

Características:
* Se organiza en capas bien definidas que permiten separar la presentación, la lógica de negocio, la persistencia y la base de datos.
* Las capas superiores dependen de las capas inferiores.

Ventajas:
* Permite un fácil mantenimiento, ya que los cambios de una capa no impactan en el resto.
* Mejor organización del código proporcionando una estructura lógica.

Desventajas:
* El paso de datos entre las capas hace que el sistema sea más lento.
* Dificultades a la hora de adaptar nuevas tecnologías.

Ejemplo:
Un sistema de gestión empresarial en el que se distribuyen las responsabilidades por capas de presentación, lógica de negocio y acceso a datos.

Referencias: Bass, L., Clements, P., & Kazman, R. (2012). Software Architecture in Practice (3rd ed.). Addison-Wesley.
